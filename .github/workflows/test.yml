name: "CI - Test Features"
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        features:
          - flutter
          - buf
          - opencommit
          - ros2
        baseImage:
          - debian
          - ubuntu
        exclude:
          # ROS2 typically works better with Ubuntu
          - features: ros2
            baseImage: debian
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Generating tests for '${{ matrix.features }}' against '${{ matrix.baseImage }}'"
        run: devcontainer features test --skip-scenarios -f ${{ matrix.features }} -i mcr.microsoft.com/devcontainers/base:${{ matrix.baseImage }}

  test-scenarios:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        features:
          - flutter
          - buf
          - opencommit
          - ros2
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Testing '${{ matrix.features }}' scenarios"
        run: devcontainer features test -f ${{ matrix.features }}

  test-flutter-specific:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scenario:
          - test_defaults_debian
          - test_stable_channel
          - test_beta_channel
          - test_without_web_support
          - test_ubuntu
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Test Flutter scenario: ${{ matrix.scenario }}"
        run: devcontainer features test -f flutter --scenario ${{ matrix.scenario }}

  test-flutter-architectures:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Test Flutter on ${{ matrix.platform }}"
        run: |
          # Create a test devcontainer.json for this platform
          mkdir -p .test-platform
          cat > .test-platform/devcontainer.json << EOF
          {
            "image": "mcr.microsoft.com/devcontainers/base:debian",
            "features": {
              "./src/flutter": {
                "version": "stable",
                "channel": "stable",
                "enableWebSupport": true
              }
            }
          }
          EOF
          
          # Build and test the container for the specific platform
          cd .test-platform
          devcontainer build --platform ${{ matrix.platform }} .

  validate-flutter-installation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: "Build test container"
        run: |
          docker build -f test-flutter.Dockerfile -t test-flutter-ci .

      - name: "Validate Flutter installation"
        run: |
          echo "Testing Flutter version..."
          docker run --rm test-flutter-ci flutter --version
          
          echo "Testing Dart version..."
          docker run --rm test-flutter-ci dart --version
          
          echo "Testing Flutter doctor..."
          docker run --rm test-flutter-ci flutter doctor --version
          
          echo "Testing Flutter config..."
          docker run --rm test-flutter-ci flutter config
          
          echo "Testing Flutter devices..."
          docker run --rm test-flutter-ci flutter devices
          
          echo "Testing PATH configuration..."
          docker run --rm test-flutter-ci which flutter
          docker run --rm test-flutter-ci which dart

  test-flutter-web-project:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: "Build test container"
        run: |
          docker build -f test-flutter.Dockerfile -t test-flutter-web .

      - name: "Test Flutter web project creation"
        run: |
          echo "Creating Flutter web project..."
          docker run --rm test-flutter-web bash -c "
            cd /tmp && 
            flutter create --platforms web test_web_app &&
            cd test_web_app &&
            flutter analyze &&
            flutter test &&
            echo 'Flutter web project created and tested successfully!'
          "

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'