name: "Flutter Feature Tests"
on:
  push:
    paths:
      - 'src/flutter/**'
      - 'test/flutter/**'
      - '.github/workflows/test-flutter.yml'
  pull_request:
    paths:
      - 'src/flutter/**'
      - 'test/flutter/**'
      - '.github/workflows/test-flutter.yml'
  workflow_dispatch:

jobs:
  test-flutter-channels:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        channel: [stable, beta, dev, master]
        base_image: [debian, ubuntu]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Install devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Test Flutter ${{ matrix.channel }} on ${{ matrix.base_image }}"
        run: |
          mkdir -p .test-channel
          cat > .test-channel/devcontainer.json << EOF
          {
            "image": "mcr.microsoft.com/devcontainers/base:${{ matrix.base_image }}",
            "features": {
              "../src/flutter": {
                "version": "${{ matrix.channel }}",
                "channel": "${{ matrix.channel }}",
                "enableWebSupport": true
              }
            }
          }
          EOF
          
          cd .test-channel
          timeout 600 devcontainer up --workspace-folder .
          devcontainer exec --workspace-folder . flutter --version
          devcontainer exec --workspace-folder . dart --version
          devcontainer exec --workspace-folder . flutter doctor --version

  test-flutter-web-support:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        web_support: [true, false]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Install devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Test Flutter with web support: ${{ matrix.web_support }}"
        run: |
          mkdir -p .test-web
          cat > .test-web/devcontainer.json << EOF
          {
            "image": "mcr.microsoft.com/devcontainers/base:debian",
            "features": {
              "../src/flutter": {
                "version": "stable",
                "channel": "stable",
                "enableWebSupport": ${{ matrix.web_support }}
              }
            }
          }
          EOF
          
          cd .test-web
          timeout 600 devcontainer up --workspace-folder .
          
          if [ "${{ matrix.web_support }}" = "true" ]; then
            devcontainer exec --workspace-folder . flutter config | grep "enable-web: true"
            devcontainer exec --workspace-folder . flutter devices | grep "web-server" || echo "Web server device not found"
          else
            devcontainer exec --workspace-folder . flutter config | grep "enable-web: false" || echo "Web support correctly disabled"
          fi

  test-flutter-project-creation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Install devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Test Flutter project creation"
        run: |
          mkdir -p .test-project
          cat > .test-project/devcontainer.json << EOF
          {
            "image": "mcr.microsoft.com/devcontainers/base:debian",
            "features": {
              "../src/flutter": {
                "version": "stable",
                "channel": "stable",
                "enableWebSupport": true
              }
            }
          }
          EOF
          
          cd .test-project
          timeout 600 devcontainer up --workspace-folder .
          
          # Create a simple Flutter web app
          devcontainer exec --workspace-folder . bash -c "
            cd /tmp &&
            flutter create --platforms web test_app &&
            cd test_app &&
            flutter analyze &&
            flutter test &&
            echo 'Flutter project created and tested successfully!'
          "

  test-flutter-performance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Test Flutter installation performance"
        run: |
          echo "Testing Flutter installation time..."
          start_time=$(date +%s)
          
          docker build -f test-flutter.Dockerfile -t test-flutter-perf . --no-cache
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          
          echo "Flutter installation took ${duration} seconds"
          
          # Fail if installation takes more than 10 minutes (600 seconds)
          if [ $duration -gt 600 ]; then
            echo "Installation took too long: ${duration}s > 600s"
            exit 1
          fi
          
          echo "Installation completed within acceptable time: ${duration}s"

  test-flutter-cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Test Flutter installation cleanup"
        run: |
          docker build -f test-flutter.Dockerfile -t test-flutter-cleanup .
          
          # Check that no unnecessary files are left behind
          docker run --rm test-flutter-cleanup bash -c "
            echo 'Checking for temporary files...'
            find /tmp -name '*flutter*' -type f | head -10
            
            echo 'Checking installation size...'
            du -sh /opt/flutter
            
            echo 'Checking for proper permissions...'
            ls -la /opt/flutter/bin/
            
            echo 'Checking symlinks...'
            ls -la /usr/local/bin/flutter /usr/local/bin/dart
          "

  validate-flutter-scenarios:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scenario:
          - test_defaults_debian
          - test_stable_channel
          - test_beta_channel
          - test_without_web_support
          - test_ubuntu
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Install devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Validate scenario: ${{ matrix.scenario }}"
        run: |
          echo "Testing scenario: ${{ matrix.scenario }}"
          timeout 600 devcontainer features test -f flutter --scenario ${{ matrix.scenario }}

  test-flutter-error-handling:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Test error handling with invalid parameters"
        run: |
          mkdir -p .test-error
          
          # Test with invalid channel
          cat > .test-error/devcontainer.json << EOF
          {
            "image": "mcr.microsoft.com/devcontainers/base:debian",
            "features": {
              "../src/flutter": {
                "version": "invalid-version",
                "channel": "invalid-channel"
              }
            }
          }
          EOF
          
          cd .test-error
          
          # This should fail gracefully
          if timeout 300 devcontainer up --workspace-folder . 2>&1 | grep -i "error\|failed"; then
            echo "Error handling test passed - invalid parameters were caught"
          else
            echo "Error handling test failed - invalid parameters should have been caught"
            exit 1
          fi